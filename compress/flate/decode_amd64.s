// Code generated by command: go run main.go. DO NOT EDIT.

#include "textflag.h"

// func decodeHuffmanAsmArchV3(state *inflate, output []byte, offset int) (written int, errno int)
// Requires: BMI2, CMOV, MMX+, SSE2, SSSE3
TEXT ·decodeHuffmanAsmArchV3(SB), $24-56
        MOVQ state+0(FP), R9
        MOVQ output_base+8(FP), R13
        MOVQ output_len+16(FP), R11
        ADDQ R13, R11
        MOVQ R13, R10
        ADDQ offset+32(FP), R10
        LEAQ ·rfcLookupTable+0(SB), R12
        MOVQ 24(R9), DI
        MOVL 32(R9), R8

        // nextIn = &s.Input[0]
        MOVQ (R9), BX

        // endIn = &s.Input[0] + len(s.Input)
        MOVQ    8(R9), SI
        SUBQ    $+8, SI
        ADDQ    BX, SI
        MOVL    $+0, 44(R9)
        MOVL    $+0, 48(R9)
        CMPQ    BX, SI
        JG      end
        MOVQ    SI, DX
        SUBQ    BX, DX
        MOVQ    R8, CX
        MOVQ    $+64, R14
        SUBQ    R8, R14
        SHRQ    $+3, R14
        CMPQ    R14, DX
        CMOVQGT DX, R14
        CMPQ    R14, $+0
        JE      slow_load_end

slow_load_load_byte:
        XORQ  DX, DX
        MOVB  (BX), DL
        SHLXQ CX, DX, DX
        ORQ   DX, DI
        ADDQ  $+8, CX
        ADDQ  $+1, BX
        SUBQ  $+1, R14
        JG    slow_load_load_byte
        MOVQ  CX, R8

slow_load_end:
loop_block:
        CMPQ BX, SI
        JG   end_of_input
        CMPQ R10, R11
        JG   end_of_output
        MOVQ DI, AX
        ANDQ $+4095, AX
        MOVL 52(R9)(AX*4), DX

        // << decode next lit len start >>
        MOVQ    DX, CX
        SHRQ    $0x1c, CX
        JZ      invalid_symbol
        MOVQ    DX, AX
        SHRQ    $+26, AX
        ANDQ    $+3, AX
        ANDQ    $+67108863, DX
        TESTQ   $+33554432, DX
        JZ      decode_next_lit_len_end
        SHLQ    $+2, CX
        ORQ     AX, CX
        MOVQ    DI, AX
        SHRQ    $+12, AX
        SUBQ    $0x4c, CX
        ANDQ    $0x1f, CX
        BZHIQ   CX, AX, AX
        ANDQ    $+33554431, DX
        ADDQ    AX, DX
        MOVWQZX 16436(R9)(DX*2), DX
        MOVQ    $+1, AX
        MOVQ    DX, CX
        SHRQ    $+10, CX
        JZ      invalid_symbol
        ANDQ    $+1023, DX

decode_next_lit_len_end:
        // readIn >>= RCX
        SHRXQ CX, DI, DI
        SUBQ  CX, R8

        // << decode next lit len end >>
        MOVQ  DX, (R10)
        ADDQ  AX, R10
        XORQ  CX, CX
        LEAQ  -8(CX)(AX*8), AX
        SHRXQ AX, DX, AX

        // << start load in >>
        // temp1 = *(*uint64)(nextIn) << readInLength
        SHLXQ R8, (BX), DX

        // readIn |= temp1
        ORQ  DX, DI
        MOVQ $+64, DX
        SUBQ R8, DX
        SHRQ $+3, DX
        ADDQ DX, BX
        LEAQ (R8)(DX*8), R8

        // << end load in >>
        CMPQ AX, $+256
        JE   end_symbol_pre
        JG   start_distlen_process
        CMPQ BX, SI
        JG   end_of_input
        CMPQ R10, R11
        JG   end_of_output
        MOVQ DI, AX
        ANDQ $+4095, AX
        MOVL 52(R9)(AX*4), DX

        // << decode next lit len start >>
        MOVQ    DX, CX
        SHRQ    $0x1c, CX
        JZ      invalid_symbol
        MOVQ    DX, AX
        SHRQ    $+26, AX
        ANDQ    $+3, AX
        ANDQ    $+67108863, DX
        TESTQ   $+33554432, DX
        JZ      decode_next_lit_len_end1
        SHLQ    $+2, CX
        ORQ     AX, CX
        MOVQ    DI, AX
        SHRQ    $+12, AX
        SUBQ    $0x4c, CX
        ANDQ    $0x1f, CX
        BZHIQ   CX, AX, AX
        ANDQ    $+33554431, DX
        ADDQ    AX, DX
        MOVWQZX 16436(R9)(DX*2), DX
        MOVQ    $+1, AX
        MOVQ    DX, CX
        SHRQ    $+10, CX
        JZ      invalid_symbol
        ANDQ    $+1023, DX

decode_next_lit_len_end1:
        // readIn >>= RCX
        SHRXQ CX, DI, DI
        SUBQ  CX, R8

        // << decode next lit len end >>
        MOVQ  DX, (R10)
        ADDQ  AX, R10
        XORQ  CX, CX
        LEAQ  -8(CX)(AX*8), AX
        SHRXQ AX, DX, AX
        CMPQ  AX, $+256
        JE    end_symbol_pre
        JL    loop_block

        // << start load in >>
        // temp1 = *(*uint64)(nextIn) << readInLength
        SHLXQ R8, (BX), DX

        // readIn |= temp1
        ORQ  DX, DI
        MOVQ $+64, DX
        SUBQ R8, DX
        SHRQ $+3, DX
        ADDQ DX, BX
        LEAQ (R8)(DX*8), R8

        // << end load in >>
start_distlen_process:
        PREFETCHT0 32(R12)
        LEAQ       -254(AX), R15
        MOVQ       DI, R14
        ANDQ       $+1023, R14
        MOVWQZX    18964(R9)(R14*2), AX

        // Notice: we saved the extra_length into RCX
        MOVQ    AX, CX
        SHRQ    $+11, CX
        JZ      invalid_dist_symbol_DIST_SYM
        ANDQ    $+1535, AX
        TESTQ   $+1024, AX
        JZ      decode_next_dist_end
        MOVQ    DI, R14
        SHRQ    $+10, R14
        SUBQ    $0x4a, CX
        ANDQ    $0x1f, CX
        BZHIQ   CX, R14, R14
        LEAQ    (R9)(AX*2), AX
        MOVWQZX 18964(AX)(R14*2), AX
        MOVQ    AX, CX
        SHRQ    $+10, CX
        JZ      invalid_dist_symbol_DIST_SYM
        ANDQ    $+511, AX

decode_next_dist_end:
        SHRXQ      CX, DI, DI
        SUBQ       CX, R8
        MOVQ       AX, CX
        SHRQ       $+5, CX
        ANDQ       $+31, CX
        ANDQ       $+31, AX
        XORQ       DX, DX
        MOVW       32(R12)(AX*2), DX
        MOVQ       DI, AX
        BZHIQ      CX, AX, AX
        SHRXQ      CX, DI, DI
        SUBQ       CX, R8
        SUBQ       $+1, R10
        ADDQ       AX, DX
        MOVQ       R10, AX
        SUBQ       DX, AX
        PREFETCHT0 (AX)
        LEAQ       (R10)(R15*1), R10
        CMPQ       AX, R13
        JL         invalid_look_back_distance
        CMPQ       DX, $+1
        JE         broadcast_1_copy
        MOVOU      (AX), X1
        MOVQ       $+16, R14
        CMPQ       R14, R15
        CMOVQGT    R15, R14
        CMPQ       DX, R14
        JL         small_byte_copy_pre

large_byte_copy:
        MOVOU X1, (AX)(DX*1)
        SUBQ  $+16, R15
        JLE   loop_block
        ADDQ  $+16, AX
        MOVOU (AX), X1
        JMP   large_byte_copy

small_byte_copy_pre:
        ADDQ DX, R15

small_byte_copy:
        MOVOU X1, (AX)(DX*1)
        SHLQ  $+1, DX
        MOVOU (AX), X1
        CMPQ  DX, $+16
        JL    small_byte_copy
        SUBQ  DX, R15
        JGE   large_byte_copy
        JMP   loop_block

broadcast_1_copy:
        MOVOU  (AX), X1
        PSHUFB BROADCAST_1<>+0(SB), X1

broadcast_1:
        MOVOU X1, (AX)(DX*1)
        SUBQ  $+16, R15
        JLE   loop_block
        ADDQ  $+16, AX
        JMP   broadcast_1
        MOVOU  (AX), X1
        PSHUFB BROADCAST_2<>+0(SB), X1

broadcast_2:
        MOVOU X1, (AX)(DX*1)
        SUBQ  $+16, R15
        JLE   loop_block
        ADDQ  $+16, AX
        JMP   broadcast_2

end_of_input:
        XORQ DX, DX
        MOVL DX, 40(R9)
        MOVL DX, 36(R9)
        MOVQ $+1, AX
        JMP  end

invalid_look_back_distance:
        MOVQ $-1, AX
        SUBQ DX, AX
        JMP  end
        MOVQ $-3, AX
        JMP  end
        CMPQ R8, DX
        JL   end_of_input
        JMP  invalid_symbol

invalid_dist_symbol_DIST_SYM:
        CMPQ R8, AX
        JL   end_of_input

invalid_symbol:
        MOVQ $-2, AX
        JMP  end

end_of_output:
        MOVQ $+2, AX
        JMP  end

end_symbol_pre:
        SUBQ $+1, R10
        XORQ AX, AX
        XORQ AX, AX

end:
        MOVQ DI, 24(R9)
        MOVL R8, 32(R9)
        SUBQ R13, R10
        MOVQ R10, written+40(FP)
        SUBQ offset+32(FP), R10
        MOVQ 8(R9), DX
        MOVQ BX, (R9)
        ADDQ $+8, SI
        SUBQ BX, SI
        MOVQ SI, 8(R9)
        SUBQ SI, DX
        MOVQ 16(R9), SI
        SUBQ DX, SI
        MOVQ SI, 16(R9)
        MOVQ AX, errno+48(FP)
        RET

DATA BROADCAST_1<>+0(SB)/8, $0x0000000000000000
DATA BROADCAST_1<>+8(SB)/8, $0x0000000000000000
GLOBL BROADCAST_1<>(SB), RODATA, $16

DATA BROADCAST_2<>+0(SB)/8, $0x0100010001000100
DATA BROADCAST_2<>+8(SB)/8, $0x0100010001000100
GLOBL BROADCAST_2<>(SB), RODATA, $16
